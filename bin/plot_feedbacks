#!/usr/bin/env python3
'''Plot bar plot with model feedbacks.

Usage: plot_feedbacks MODELS CMIP5 CMIP6 OUTPUT [OPTIONS]

Arguments:

  MODELS        Table of all models (CSV).
  CMIP5, CMIP6  Input data (CSV). The table should contain a column "Model" identifying the model, and columns to calculate statistics for.
  OUTPUT        Output plot (PDF).

Options:

  --annotated  Plot bar chart annotations.

Examples:

bin/plot_feedbacks input/models.csv input/CMIP{5,6}_ECS_ERF_fbks.csv plot/feedbacks.pdf
'''

import os
from importlib.machinery import SourceFileLoader
model_weights = SourceFileLoader('module.name',
	os.path.join(os.path.dirname(__file__), 'model_weights')).load_module()

import sys
import string
from warnings import warn
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib as mpl
import scipy
import pst

COLORS = ['#0084C8', '#DC0000', '#009100', '#FFC022', '#ba00ff']

HATCH = [
	'///',
	'---',
	'\\\\\\',
	'...',
	'|||',
]

mpl.rc('font', family='Open Sans')
mpl.rc('axes', linewidth=0.3)
mpl.rc('axes', grid=True)
mpl.rc('lines', linewidth=1.2)
mpl.rc('xtick.major', width=0.3)
mpl.rc('ytick.major', width=0.3)
mpl.rc('legend', framealpha=1)
mpl.rc('legend', facecolor='#eeeeee')
mpl.rc('legend', edgecolor='none')
mpl.rc('legend', fancybox=False)
mpl.rc('legend', fontsize=8)
mpl.rc('grid', color='k')
mpl.rc('grid', alpha=0.2)
mpl.rc('grid', lw=0.1)

VARS = {
	'PL': 'Planck',
	'WV': 'WV',
	'LR': 'LR',
	'WV+LR': 'WV+LR',
	'ALB': 'Albedo',
	'CLD': 'Cloud',
	'CLD_SW': 'Cloud$_\mathrm{SW}$',
	'CLD_LW': 'Cloud$_\mathrm{LW}$',
	'NET': 'Net',
	'ERR': 'Residual',
}
VARS2 = {'ECS': 'ECS'}
VARS3 = {
	'ERF_2x': 'ERF$_{\\mathrm{2x}}$',
	'TCR': 'TCR',
}
VARS_RMSD = [
	'PL',
	'WV',
	'LR',
	'ALB',
	'CLD_SW',
	'CLD_LW',
]

YLABEL = 'Feedback difference (mWm$^{-2}$K$^{-1}$)'
YLABEL2 = 'ECS difference (K)'
YLABEL3 = {
	 'ERF_2x': 'ERF$_{\\mathrm{2x}}$ difference (mWm$^{-2}$)',
	 'TCR': 'TCR difference (K)',
}

YLIM = [-160, 100]
YLIM2 = [-0.3, 0.2]
YLIM3 = {
	'ERF_2x': [-85, 70],
	'TCR': [-0.05, 0.05],
}

YLIMD = [-120, 150]
YLIMD2 = [0, 0.55]
YLIMD3 = {
	'ERF_2x': [0, 260],
	'TCR': [-0.05, 0.05],
}

SCALE = 1000
SCALE2 = 1
SCALE3 = {
	'ERF_2x': 1000,
	'TCR': 1,
}

TYPES = ['variant', 'model', 'institute', 'country', 'code', 'family']

def get_weights(type_, models, subset):
	weights = {}
	d = model_weights.model_weights(type_, models, subset)
	for i, model in enumerate(d['model']):
		if np.isfinite(d['weight'][i]):
			weights[model] = d['weight'][i]
	return weights

def calc_stats(d, vars_, models_table):
	out = {}
	varsx = [x for x in vars_.keys() if x in d.keys()]
	unmatched = set()
	for type_ in TYPES:
		for var in varsx:
			models = []
			values = []
			for i, model in enumerate(d['Model']):
				if np.isfinite(d[var][i]):
					models += [model]
					values += [d[var][i]]
			if len(models) > 0:
				weights = get_weights(type_, models_table, models)
				w = np.array([weights.get(model, np.nan) for model in models])
				mask = np.isfinite(w)
				for model in np.array(models)[~mask]:
					unmatched.add(model)
				values = np.array(values)
				m = np.average(values[mask], weights=w[mask])
				s = np.average(values[mask]**2, weights=w[mask])
				out['%s_%s' % (var, type_)] = m
				#out['%s_%s_var' % (var, type_)] = s - m**2
			else:
				out['%s_%s' % (var, type_)] = 0

	for model in unmatched:
		warn('Model "%s" not found in the models table' % model)

	return out

def plot(d, s, d1, d2, s1, s2, vars_, diff=False, ylim=None, legend=True,
	scale=1, ylabel=None, annotated=False):

	varsx = [x for x in vars_.keys() if x in d.keys()]
	m = len(varsx)
	x = np.arange(m)
	if diff:
		n = 2
		rmsd1 = np.sqrt(np.mean(np.array([(np.mean(d2[var]) - np.mean(d1[var])) for var in VARS_RMSD])**2))
		y = [
			(scale[var] if type(scale) is dict else scale)* \
			(np.mean(d2[var]) - np.mean(d1[var])) \
			for var in varsx
		]
		plt.bar(x, y,
			width=0.7/n,
			label='Simple mean [RMSD = %.0f mWm$^{-2}$K$^{-1}$]' % (rmsd1*1e3),
			color='k',
		)
		if annotated:
			for j in range(len(x)):
				plt.text(x[j], 0, '%.2f' % y[j],
					fontsize=4,
					ha='center',
					color='red',
				)
		rmsd2 = np.sqrt(np.mean(np.array([(s2['%s_code' % var] - s1['%s_code' % var]) for var in VARS_RMSD])**2))
		y = [
			(scale[var] if type(scale) is dict else scale)* \
			(s2['%s_code' % var] - s1['%s_code' % var]) \
			for var in varsx
		]
		plt.bar(x + 0.7/n, y,
			width=0.7/n,
			label='Code [RMSD = %.0f mWm$^{-2}$K$^{-1}$]' % (rmsd2*1e3),
			color='grey',
		)
		if annotated:
			for j in range(len(x)):
				plt.text(x[j] + 0.7/n, 0, '%.2f' % y[j],
					fontsize=4,
					ha='center',
					color='red',
				)
	else:
		n = len(TYPES) - 1
		for i, type_ in enumerate(TYPES[1:]):
			x = np.arange(m) + i*0.7/n
			y = [
				(scale[var] if type(scale) is dict else scale)* \
				(s['%s_%s' % (var, type_)] - s['%s_variant' % var]) \
				for var in varsx
			]
			plt.bar(x, y,
				width=0.7/n,
				label=type_.capitalize(),
				color=COLORS[i],
				hatch=HATCH[i],
				alpha=0.999,
			)
			#for j in range(len(x)):
			#	plt.text(x[j], 0, '%.0f' % y[j],
			#		fontsize=3,
			#		ha='center',
			#	)
	plt.gca().set_xticks(np.arange(m) + 0.7/2*(n - 1)/n)
	if diff:
		plt.gca().set_xticklabels([vars_[k] for k in varsx])
	else:
		plt.gca().set_xticklabels([
			('%s\n%.0f' if k != 'ECS' else '%s\n%.2f') % ( \
				vars_[k], \
				(scale[k] if type(scale) is dict else scale)* \
				np.mean(d[k])) \
			for k in varsx])
	plt.axhline(0, color='k', lw=0.5)
	if type(ylabel) is dict:
		ylabel = ylabel[varsx[0]] if len(varsx) > 0 else ''
	plt.ylabel(ylabel)
	if type(ylim) is dict:
		ylim = ylim[varsx[0]] if len(varsx) > 0 else [0, 0]
	plt.ylim(ylim)
	if legend:
		plt.legend(loc='upper left')

def plot_letter(i):
	plt.text(0, 1.04, '(%s)' % string.ascii_lowercase[i],
		transform=plt.gca().transAxes, weight='bold')

if __name__ == '__main__':
	args, opts = pst.decode_argv(sys.argv[1:], as_unicode=True)
	if len(args) != 4:
		sys.stderr.write(sys.modules[__name__].__doc__)
		sys.exit(1)
	models_file = args[0]
	cmip5 = args[1]
	cmip6 = args[2]
	output = args[3]
	annotated = opts.get('annotated', False)

	models_table = model_weights.read_models(models_file)

	d1 = pd.read_csv(cmip5)
	d2 = pd.read_csv(cmip6)

	vars_all = {**VARS, **VARS2, **VARS3}
	s1 = calc_stats(d1, vars_all, models_table)
	s2 = calc_stats(d2, vars_all, models_table)

	fig = plt.figure(figsize=(12, 12))
	gs = mpl.gridspec.GridSpec(3, 3, width_ratios=[0.9, 0.1, 0.1], \
		wspace=0.3, hspace=0.3)
	fig.add_subplot(gs[0])
	plt.title('CMIP6')
	plot_letter(0)
	plot(d2, s2, d1, d2, s1, s2, VARS, ylim=YLIM, scale=SCALE, ylabel=YLABEL)
	fig.add_subplot(gs[1])
	plot(d2, s2, d1, d2, s1, s2, VARS2, legend=False, ylim=YLIM2, scale=SCALE2,
		ylabel=YLABEL2)
	fig.add_subplot(gs[2])
	plot(d2, s2, d1, d2, s1, s2, VARS3, legend=False, ylim=YLIM3, scale=SCALE3,
		ylabel=YLABEL3)
	fig.add_subplot(gs[3])
	plt.title('CMIP5')
	plot_letter(1)
	plot(d1, s1, d1, d2, s1, s2, VARS, legend=False, ylim=YLIM, scale=SCALE,
		ylabel=YLABEL)
	fig.add_subplot(gs[4])
	plot(d1, s1, d1, d2, s1, s2, VARS2, legend=False, ylim=YLIM2, scale=SCALE2,
		ylabel=YLABEL2)
	fig.add_subplot(gs[5])
	plot(d1, s1, d1, d2, s1, s2, VARS3, legend=False, ylim=YLIM3, scale=SCALE3,
		ylabel=YLABEL3)
	fig.add_subplot(gs[6])
	plt.title('CMIP6 - CMIP5')
	plot_letter(2)
	plot(d1, s1, d1, d2, s1, s2, VARS, diff=True, legend=True, ylim=YLIMD,
		scale=SCALE, ylabel=YLABEL, annotated=annotated)
	fig.add_subplot(gs[7])
	plot(d1, s1, d1, d2, s1, s2, VARS2, diff=True, legend=False, ylim=YLIMD2,
		scale=SCALE2, ylabel=YLABEL2, annotated=annotated)
	fig.add_subplot(gs[8])
	plot(d1, s1, d1, d2, s1, s2, VARS3, diff=True, legend=False, ylim=YLIMD3,
		scale=SCALE3, ylabel=YLABEL3, annotated=annotated)
	plt.savefig(output, bbox_inches='tight')
