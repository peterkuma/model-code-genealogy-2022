#!/usr/bin/env python3
'''Plot bar plot with model feedbacks.

Usage: plot_feedbacks <models> <cmip5> <cmip6> <output>

Arguments:

- models: Table of all models (CSV).
- cmip5, cmip6: Input data (CSV). The table should contain a column "Model"
identifying the model, and columns to calculate statistics for.
- output: Output plot (PDF).

Examples:

bin/plot_feedbacks input/models.csv input/zelinka2021_table_S{2,1}.csv plot/feedbacks.pdf
'''

import os
from importlib.machinery import SourceFileLoader
model_weights = SourceFileLoader('module.name',
	os.path.join(os.path.dirname(__file__), 'model_weights')).load_module()

import sys
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib as mpl
import scipy

COLORS = ['#0084C8', '#DC0000', '#009100', '#FFC022']

HATCH = [
	'///',
	'---',
	'\\\\\\',
	'...',
]

mpl.rc('font', family='Open Sans')
mpl.rc('axes', linewidth=0.3)
mpl.rc('axes', grid=True)
mpl.rc('lines', linewidth=1.2)
mpl.rc('xtick.major', width=0.3)
mpl.rc('ytick.major', width=0.3)
mpl.rc('legend', framealpha=1)
mpl.rc('legend', facecolor='#eeeeee')
mpl.rc('legend', edgecolor='none')
mpl.rc('legend', fancybox=False)
mpl.rc('legend', fontsize=8)
mpl.rc('grid', color='k')
mpl.rc('grid', alpha=0.2)
mpl.rc('grid', lw=0.1)

VARS = {
	'PL_hs': 'Planck',
	'LR_hs': 'LR',
	'RH': 'RH',
	'ALB': 'Albedo',
	'CLD': 'Cloud',
	'CLD_SW': 'Cloud$_{SW}$',
	'CLD_LW': 'Cloud$_{LW}$',
	'NET': 'Net',
	'ERR': 'Residual',
}
VARS2 = {'ECS': 'ECS'}
VARS3 = {'ERF_2x': 'ERF$_{2x}$'}

YLABEL = 'Feedback difference (mWm$^{-2}K^{-1}$)'
YLABEL2 = 'ECS difference (K)'
YLABEL3 = 'ERF$_{2x}$ difference (mWm$^{-2}$)'

YLIM = [-130, 130]
YLIM2 = [-0.1, 0.6]
YLIM3 = [-120, 120]

TYPES = ['variant', 'model', 'institute', 'country', 'code']

def get_weights(type_, models, subset):
	weights = {}
	d = model_weights.model_weights(type_, models, subset)
	for i, model in enumerate(d['model']):
		if np.isfinite(d['weight'][i]):
			weights[model] = d['weight'][i]
	return weights

def plot(d, d1, d2, models_table, vars_, \
	ylim=None, legend=True, scale=1, ylabel=None):
	out = {}
	for type_ in TYPES:
		for var in vars_.keys():
			models = []
			for i, model in enumerate(d['Model']):
				if np.isfinite(d[var][i]):
					models += [model]
			if len(models) > 0:
				weights = get_weights(type_, models_table, models)
				w = np.array([weights.get(model, np.nan) for model in models])
				mask = np.isfinite(w)
				values = np.array(d[var])
				out['%s_%s' % (var, type_)] = np.average(values[mask], weights=w[mask])

	n = len(TYPES)
	m = len(vars_.keys())
	x = np.arange(m)
	plt.bar(x, [
			scale*(np.mean(d2[var]) - np.mean(d1[var])) \
			for var in vars_.keys()
		],
		width=0.7/n,
		label='CMIP6 - CMIP5',
		color='k',
	)
	for i, type_ in enumerate(TYPES[1:]):
		x = np.arange(m) + (i+1)/n*0.7
		plt.bar(x, [
				scale*(out['%s_%s' % (var, type_)] - out['%s_variant' % var]) \
				for var in vars_.keys()
			],
			width=0.7/n,
			label=type_.capitalize(),
			color=COLORS[i],
			hatch=HATCH[i],
			alpha=0.999,
		)
	plt.gca().set_xticks(np.arange(m) + 0.5*(n-1)/n*0.7)
	plt.gca().set_xticklabels(vars_.values())
	plt.axhline(0, color='k', lw=0.5)
	plt.ylabel(ylabel)
	plt.ylim(ylim)
	if legend:
		plt.legend(loc='upper left')

if __name__ == '__main__':
	if len(sys.argv) != 5:
		sys.stderr.write(sys.modules[__name__].__doc__)
		sys.exit(1)
	models_file = sys.argv[1]
	cmip5 = sys.argv[2]
	cmip6 = sys.argv[3]
	output = sys.argv[4]

	models_table = model_weights.read_models(models_file)

	d1 = pd.read_csv(cmip5)
	d2 = pd.read_csv(cmip6)

	fig = plt.figure(figsize=(12, 8))
	gs = mpl.gridspec.GridSpec(2, 3, width_ratios=[0.9, 0.1, 0.1], wspace=0.3)
	fig.add_subplot(gs[0])
	plt.title('CMIP6')
	plot(d2, d1, d2, models_table, VARS, ylim=YLIM, scale=1000, ylabel=YLABEL)
	fig.add_subplot(gs[1])
	plot(d2, d1, d2, models_table, VARS2, legend=False, ylim=YLIM2, ylabel=YLABEL2)
	fig.add_subplot(gs[2])
	plot(d2, d1, d2, models_table, VARS3, legend=False, ylim=YLIM3, scale=1000, ylabel=YLABEL3)
	fig.add_subplot(gs[3])
	plt.title('CMIP5')
	plot(d1, d1, d2, models_table, VARS, legend=False, ylim=YLIM, scale=1000, ylabel=YLABEL)
	fig.add_subplot(gs[4])
	plot(d1, d1, d2, models_table, VARS2, legend=False, ylim=YLIM2, ylabel=YLABEL2)
	fig.add_subplot(gs[5])
	plot(d1, d1, d2, models_table, VARS3, legend=False, ylim=YLIM3, scale=1000, ylabel=YLABEL3)
	plt.savefig(output, bbox_inches='tight')
