#!/usr/bin/env python3
'''Plot bar plot with model feedbacks by model family.

Usage: plot_feedbacks_by_family <models> <cmip5> <cmip6> <output>

Arguments:

- models: Table of all models (CSV).
- cmip5, cmip6: Input data (CSV). The table should contain a column "Model"
identifying the model, and columns to calculate statistics for.
- output: Output plot (PDF).

Examples:

bin/plot_feedbacks_by_family input/models.csv input/zelinka2021_table_S{2,1}.csv plot/feedbacks_by_family.pdf
'''

import os
from importlib.machinery import SourceFileLoader
model_weights = SourceFileLoader('module.name',
	os.path.join(os.path.dirname(__file__), 'model_weights')).load_module()

import sys
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib as mpl
import scipy

mpl.rc('font', family='Open Sans')
mpl.rc('axes', linewidth=0.3)
mpl.rc('axes', grid=True)
mpl.rc('lines', linewidth=1.2)
mpl.rc('xtick.major', width=0.3)
mpl.rc('ytick.major', width=0.3)
mpl.rc('legend', framealpha=1)
mpl.rc('legend', facecolor='#eeeeee')
mpl.rc('legend', edgecolor='none')
mpl.rc('legend', fancybox=False)
mpl.rc('legend', fontsize=8)
mpl.rc('grid', color='k')
mpl.rc('grid', alpha=0.2)
mpl.rc('grid', lw=0.1)

VARS = {
	'PL_hs': 'Planck',
	'LR_hs': 'LR',
	'RH': 'RH',
	'ALB': 'Albedo',
	'CLD': 'Cloud',
	'CLD_SW': 'Cloud$_{SW}$',
	'CLD_LW': 'Cloud$_{LW}$',
	'NET': 'Net',
	'ERR': 'Residual',
}
VARS2 = {'ECS': 'ECS'}
VARS3 = {'ERF_2x': 'ERF$_{2x}$'}

YLABEL = 'Feedback (Wm$^{-2}K^{-1}$)'
YLABEL2 = 'ECS (K)'
YLABEL3 = 'ERF$_{2x}$ (Wm$^{-2}$)'

YLIM = [-2, 1.5]
YLIM2 = [1.5, 6]
YLIM3 = [2.5, 4.5]

def plot(d, models, vars_, \
	ylim=None, legend=True, ylabel=None, family_no=None, show_hline=False):

	families = list(set(models['family']))
	n = len(families)
	families2 = []
	for family in families:
		variants = []
		for i in range(len(models['family'])):
			if models['family'][i] == family:
				variants += models['variants'][i]
		mask = np.array([m in variants for m in d['Model']])
		m = np.sum(mask)
		if m > 0:
			families2 += [family]
	families = sorted(families2)
	n = len(families)

	xticks = []
	xticklabels = []
	cmap = plt.get_cmap('tab10')
	for i, var in enumerate(vars_):
		for j, family in enumerate(families):
			variants = []
			for k in range(len(models['family'])):
				if models['family'][k] == family:
					variants += models['variants'][k]
			mask = np.array([m in variants for m in d['Model']])
			m = np.sum(mask)
			x = i*n*1.1 + j
			xticks += [x]
			xticklabels += [family_no[family]]
			label = '%s [%d]' % (family, family_no[family]) if i == 0 else None
			plt.scatter([x]*m, d[var][mask],
				s=16,
				lw=0.8,
				color='none',
				edgecolor=cmap(family_no[family] - 1),
				label=label)
	plt.ylim(ylim)
	plt.yticks(np.arange(ylim[0], ylim[1] + 0.5, 0.5))
	for i, var in enumerate(vars_):
		plt.text(i*n*1.1 + 0.5*(n - 1), ylim[0] - 0.09*(ylim[1] - ylim[0]),
			VARS.get(var, var), va='top', ha='center')
	plt.gca().set_xticks(xticks)
	plt.gca().set_xticklabels(xticklabels, fontsize=5.5)
	plt.xlim(xticks[0] - 1, xticks[-1] + 1)
	if show_hline:
		plt.axhline(0, color='k', lw=0.5)
	plt.ylabel(ylabel)
	if legend:
		plt.legend(loc='upper left', fontsize=5.5, handlelength=0.8,
			handletextpad=0.5)

if __name__ == '__main__':
	if len(sys.argv) != 5:
		sys.stderr.write(sys.modules[__name__].__doc__)
		sys.exit(1)
	models_file = sys.argv[1]
	cmip5 = sys.argv[2]
	cmip6 = sys.argv[3]
	output = sys.argv[4]

	models = model_weights.read_models(models_file)

	d1 = pd.read_csv(cmip5)
	d2 = pd.read_csv(cmip6)

	families = list(set(models['family']))
	n = len(families)
	families2 = []
	for family in families:
		variants = []
		for i in range(len(models['family'])):
			if models['family'][i] == family:
				variants += models['variants'][i]
		mask1 = np.array([m in variants for m in d1['Model']])
		mask2 = np.array([m in variants for m in d2['Model']])
		if np.sum(mask1) > 0 or np.sum(mask2) > 0:
			families2 += [family]
	families = sorted(families2)
	family_no = {f: i+1 for i, f in enumerate(families)}

	fig = plt.figure(figsize=(12, 7))
	gs = mpl.gridspec.GridSpec(2, 3, width_ratios=[0.9, 0.1, 0.1], hspace=0.28, wspace=0.22)
	fig.add_subplot(gs[0])
	plt.title('CMIP6')
	plot(d2, models, VARS, ylim=YLIM, ylabel=YLABEL, family_no=family_no, show_hline=True)
	fig.add_subplot(gs[1])
	plot(d2, models, VARS2, legend=False, ylim=YLIM2, ylabel=YLABEL2, family_no=family_no)
	fig.add_subplot(gs[2])
	plot(d2, models, VARS3, legend=False, ylim=YLIM3, ylabel=YLABEL3, family_no=family_no)
	fig.add_subplot(gs[3])
	plt.title('CMIP5')
	plot(d1, models, VARS, legend=True, ylim=YLIM, ylabel=YLABEL, family_no=family_no, show_hline=True)
	fig.add_subplot(gs[4])
	plot(d1, models, VARS2, legend=False, ylim=YLIM2, ylabel=YLABEL2, family_no=family_no)
	fig.add_subplot(gs[5])
	plot(d1, models, VARS3, legend=False, ylim=YLIM3, ylabel=YLABEL3, family_no=family_no)
	plt.savefig(output, bbox_inches='tight')
