#!/usr/bin/env python3
'''Plot bar plot with model feedbacks by model group (family or country).

Usage: plot_feedbacks_by_group GROUP SEP MODELS CMIP5 CMIP6 OUTPUT [OUTPUT_CMIP5 OUTPUT_CMIP6 [BAYES_CMIP5 BAYES_CMIP6]]

Arguments:

  GROUP         Group to show. One of: "family", "country".
  SEP           CMIP5 and CMIP6 separate or together. One of "separate", "together".
  MODELS        Table of all models (CSV).
  CMIP5, CMIP6  Input data (CSV). The table should contain a column "Model" identifying the model, and columns to calculate statistics for.
  OUTPUT        Output plot (PDF).
  OUTPUT_CMIP5  CMIP5 plot data output (NetCDF).
  OUTPUT_CMIP6  CMIP6 plot data output (NetCDF).
  BAYES_CMIP5   CMIP5 Bayes test input (NetCDF).
  BAYES_CMIP6   CMIP5 Bayes test input (NetCDF).

Examples:

bin/plot_feedbacks_by_group family separate input/models.csv input/CMIP{5,6}_ECS_ERF_fbks.csv plot/feedbacks_by_family.pdf
bin/plot_feedbacks_by_group family separate input/models.csv input/CMIP{5,6}_ECS_ERF_fbks.csv plot/feedbacks_by_family.pdf data/feedbacks_by_family_cmip{5,6}.nc
bin/plot_feedbacks_by_group family separate input/models.csv input/CMIP{5,6}_ECS_ERF_fbks.csv plot/feedbacks_by_family.pdf data/feedbacks_by_family_cmip{5,6}.nc data/feedbacks_by_family_cmip{5,6}_bayes.nc
'''

import os
from importlib.machinery import SourceFileLoader
model_weights = SourceFileLoader('module.name',
	os.path.join(os.path.dirname(__file__), 'model_weights')).load_module()

import sys
import warnings
from warnings import warn
import scipy
import string
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib as mpl
import ds_format as ds

mpl.rc('font', family='Open Sans', size=8)
mpl.rc('axes', linewidth=0.3)
mpl.rc('axes', grid=True)
mpl.rc('lines', linewidth=1.2)
mpl.rc('xtick.major', width=0.3)
mpl.rc('ytick.major', width=0.3)
mpl.rc('legend', framealpha=1)
mpl.rc('legend', facecolor='#eeeeee')
mpl.rc('legend', edgecolor='none')
mpl.rc('legend', fancybox=False)
mpl.rc('legend', fontsize=8)
mpl.rc('grid', color='k')
mpl.rc('grid', alpha=0.2)
mpl.rc('grid', lw=0.1)

SYMBOLS = ['o', 's', 'v', '^', '<', '>', '*', 'h', 'D', 'X', 'P', 'p', 'x']

VARS = {
	'PL': 'Planck',
	'LR': 'Lapse rate',
	'WV+LR': 'WV+LR',
	'WV': 'Water vapour',
	'ALB': 'Surface albedo',
	'CLD': 'Cloud',
	'CLD_SW': 'Cloud$_\\mathrm{SW}$',
	'CLD_LW': 'Cloud$_\\mathrm{LW}$',
	'NET': 'Net',
	'ERR': 'Residual',
}
VARS2 = {
	'ECS': 'ECS',
	'ERF_2x': 'ERF$_{\\mathrm{2x}}$',
	'TCR': 'TCR',
}

META = {}
for var in list(VARS.keys()) + list(VARS2.keys()):
	META[var] = {
		'.dims': ['%s_model' % var]
	}
	META['%s_model' % var] = {
		'.dims': ['%s_model' % var]
	}

YLABEL = 'Feedback (Wm$^{-2}$K$^{-1}$)'
YLABEL2 = {
	'ECS': 'ECS (K)',
	'ERF_2x': 'ERF$_{\\mathrm{2x}}$ (Wm$^{-2}$)',
	'TCR': 'TCR (K)',
}

YLIM = [-3.5, 2.5]
YLIM2 = [1.5, 6]

FAMILY_ORDER = [
	'CCM',
	'CanAM',
	'CSIRO',
	'GFDL',
	'GFS',
	'HadAM',
	'ECMWF',
	'INM',
	'IPSL',
	'MIROC',
	'UA MCM',
	'UCLA GCM',
]

def plot(group, d, models, vars_, \
	ylim=None, legend=True, legend_pos='upper left', ylabel=None,
	group_no=None, show_hline=False, bayes=None):

	dout = {}
	groups = list(set(models[group]))
	n = len(groups)
	groups2 = []
	for g in groups:
		variants = []
		for i in range(len(models[group])):
			if models[group][i] == g:
				variants += models['variants'][i]
		mask = np.array([m in variants for m in d['Model']])
		m = np.sum(mask)
		if m > 0:
			groups2 += [g]
	groups = sorted(groups2)
	n = len(groups)

	xticks = []
	xticklabels = []
	cmap = plt.get_cmap('tab20')
	i = 0
	handles = []
	match = np.zeros(len(d['Model']), bool)
	for var in vars_:
		if var not in d.keys():
			continue
		gmean = 0
		nx = 0
		xticks += [i*n*1.1 + 0.5*(n - 1)]
		xticklabels += [vars_[var]]
		for j, g in enumerate(groups):
			variants = []
			for k in range(len(models[group])):
				if models[group][k] == g:
					variants += models['variants'][k]
			mask = np.array([m in variants for m in d['Model']])
			match |= mask
			mask2 = np.copy(mask)
			mask2[mask] &= np.isfinite(d[var][mask])
			mask3 = np.copy(mask)
			mask3[mask] &= np.isfinite(d['CLD_SW'][mask])
			m = np.sum(mask2)
			mx = np.sum(mask3)
			if m == 0:
				continue
			x = i*n*1.1 + j
			sym = SYMBOLS[group_no[g] - 1]
			if 'CLD_SW' in vars_ and m != mx:
				label = '%s (%d, %d)' % (g, m, mx) if i == 0 else None
			else:
				label = '%s (%d)' % (g, m) if i == 0 else None
			dout[var] = np.hstack(
				[dout[var], d[var][mask2]]
				) if var in dout else d[var][mask2]
			dout['%s_model' % var] = np.hstack(
				[dout['%s_model' % var], [g]*np.sum(mask2)]
				) if ('%s_model' % var) in dout else [g]*np.sum(mask2)
			out = plt.scatter([x]*m, d[var][mask2],
				s=18,
				lw=0.8,
				color='none',
				marker=sym,
				edgecolor=cmap(group_no[g] - 1),
				label=label)
			if bayes is not None:
				mask_b = (bayes['var'] == var) & (bayes['model'] == g)
				if np.sum(mask_b) == 1:
					p_null = bayes['p_null'][mask_b]
					if p_null < 0.05:
						plt.text(x, np.max(d[var][mask2]), '*',
							va='bottom', ha='center')
					if p_null > 0.95:
						ylim0 = plt.ylim()
						dy = ylim0[1] - ylim[0]
						plt.text(x, np.min(d[var][mask2]) - dy*0.025, '*',
							va='top', ha='center')
			handles += [out]
			mean = np.mean(d[var][mask])
			gmean += mean
			nx += 1
			line = plt.plot([x-0.5, x+0.5], [mean, mean],
				color='k', lw=0.8, zorder=-1)
		if nx > 0:
			gmean /= nx
		else:
			gmean = np.nan
		mean = np.mean(d[var])
		label = '%s mean' % group if i == 0 else None
		line, = plt.plot([i*n*1.1, i*n*1.1 + n - 1], [gmean, gmean],
			color='k', lw=0.8, zorder=-2, linestyle='dashed', label=label)
		handles = [line] + handles
		label = 'simple mean' if i == 0 else None
		line, = plt.plot([i*n*1.1, i*n*1.1 + n - 1], [mean, mean],
			color='k', lw=0.8, zorder=-2, label=label)
		handles = [line] + handles
		i += 1
	for m in d['Model'][~match]:
		warn('Model "%s" not found in the models table' % m)
	ylim1 = plt.ylim(ylim)
	plt.yticks(np.arange(ylim1[0], ylim1[1] + 0.5, 0.5))
	plt.gca().set_xticks(xticks)
	plt.gca().set_xticklabels(xticklabels) #, fontsize=5.5)
	plt.xlim(xticks[0] - n/2, xticks[-1] + n/2)
	if show_hline:
		plt.axhline(0, color='k', lw=0.5, zorder=-3, linestyle='dotted')
	if type(ylabel) == dict:
		ylabel = '; '.join([ylabel[var] for var in vars_ if var in d.keys()])
	plt.ylabel(ylabel)
	if legend:
		with warnings.catch_warnings():
			warnings.simplefilter('ignore')
			plt.legend(handles=handles, loc=legend_pos, fontsize=6,
				handlelength=1, handletextpad=0.5)
	return dout

if __name__ == '__main__':
	if len(sys.argv) not in (7, 9, 11):
		sys.stderr.write(sys.modules[__name__].__doc__)
		sys.exit(1)
	group = sys.argv[1]
	sep = sys.argv[2]
	models_file = sys.argv[3]
	cmip5 = sys.argv[4]
	cmip6 = sys.argv[5]
	output = sys.argv[6]
	if len(sys.argv) >= 9:
		output_cmip5 = sys.argv[7]
		output_cmip6 = sys.argv[8]
	else:
		output_cmip5 = None
		output_cmip6 = None
	if len(sys.argv) == 11:
		bayes_cmip5 = sys.argv[9]
		bayes_cmip6 = sys.argv[10]
	else:
		bayes_cmip5 = None
		bayes_cmip6 = None

	d_bayes_cmip5 = ds.read(bayes_cmip5) if bayes_cmip5 is not None else None
	d_bayes_cmip6 = ds.read(bayes_cmip6) if bayes_cmip6 is not None else None

	models = model_weights.read_models(models_file)

	d1 = pd.read_csv(cmip5)
	d2 = pd.read_csv(cmip6)

	d = pd.concat([d1, d2])

	groups = list(set(models[group]))
	n = len(groups)
	groups2 = []
	for g in groups:
		variants = []
		for i in range(len(models[group])):
			if models[group][i] == g:
				variants += models['variants'][i]
		mask1 = np.array([m in variants for m in d1['Model']])
		mask2 = np.array([m in variants for m in d2['Model']])
		if np.sum(mask1) > 0 or np.sum(mask2) > 0:
			groups2 += [g]
	groups = sorted(groups2)
	if group == 'family':
		group_no = {f: FAMILY_ORDER.index(f) + 1 for i, f in enumerate(groups)}
	else:
		group_no = {f: i+1 for i, f in enumerate(groups)}

	def plot_letter(i):
		plt.text(0, 1.04, '(%s)' % string.ascii_lowercase[i],
			transform=plt.gca().transAxes, weight='bold')

	if sep == 'separate':
		fig = plt.figure(figsize=(11, 10))
		gs = mpl.gridspec.GridSpec(3, 2, hspace=0.22, wspace=0.18)
		dout = {'.': META}
		fig.add_subplot(gs[0,0:2])
		plt.title('CMIP6')
		plot_letter(0)
		res = plot(group, d2, models, VARS, ylim=YLIM, ylabel=YLABEL,
			group_no=group_no, show_hline=True, bayes=d_bayes_cmip6)
		dout.update(res)
		fig.add_subplot(gs[2,0])
		plt.title('CMIP6')
		plot_letter(2)
		res = plot(group, d2, models, VARS2, legend=False, ylim=YLIM2,
			ylabel=YLABEL2, group_no=group_no, bayes=d_bayes_cmip6)
		dout.update(res)
		if output_cmip5 is not None:
			ds.write(output_cmip6, dout)
		dout = {'.': META}
		fig.add_subplot(gs[1,0:2])
		plt.title('CMIP5')
		plot_letter(1)
		res = plot(group, d1, models, VARS, legend=True, ylim=YLIM,
			ylabel=YLABEL, group_no=group_no, show_hline=True,
			bayes=d_bayes_cmip5)
		dout.update(res)
		fig.add_subplot(gs[2,1])
		plt.title('CMIP5')
		plot_letter(3)
		plot(group, d1, models, VARS2, legend=False, ylim=YLIM2,
			ylabel=YLABEL2, group_no=group_no, bayes=d_bayes_cmip5)
		dout.update(res)
		if output_cmip5 is not None:
			ds.write(output_cmip5, dout)
	else:
		fig = plt.figure(figsize=(11, 6))
		gs = mpl.gridspec.GridSpec(2, 2, hspace=0.3, wspace=0.1)
		fig.add_subplot(gs[0,0:4])
		plt.title('CMIP5 + CMIP6')
		plot_letter(0)
		plot(group, d, models, VARS, ylim=YLIM, ylabel=YLABEL,
			group_no=group_no, show_hline=True)
		fig.add_subplot(gs[1,0])
		plot_letter(1)
		plot(group, d, models, VARS2, legend=False, ylim=YLIM2, ylabel=YLABEL2,
			group_no=group_no)
		fig.add_subplot(gs[1,1])
		plot_letter(2)
		plot(group, d, models, VARS3, legend=False, ylim=YLIM3, ylabel=YLABEL3,
			group_no=group_no)
	plt.savefig(output, bbox_inches='tight')
