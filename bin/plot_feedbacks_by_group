#!/usr/bin/env python3
'''Plot bar plot with model feedbacks by model group (family or country).

Usage: plot_feedbacks_by_group <group> <models> <cmip5> <cmip6> <output>

Arguments:

- group: Group to show. One of: "family", "country".
- sep: CMIP5 and CMIP6 separate or together. One of "separate", "together".
- models: Table of all models (CSV).
- cmip5, cmip6: Input data (CSV). The table should contain a column "Model"
identifying the model, and columns to calculate statistics for.
- output: Output plot (PDF).

Examples:

bin/plot_feedbacks_by_group family separate input/models.csv input/zelinka2021_table_S{2,1}.csv plot/feedbacks_by_family.pdf
bin/plot_feedbacks_by_group country separate input/models.csv input/zelinka2021_table_S{2,1}.csv plot/feedbacks_by_country.pdf
bin/plot_feedbacks_by_group family separate input/models.csv input/ar6_cmip5.csv plot/feedbacks_ar6_by_family.pdf
bin/plot_feedbacks_by_group country separate input/models.csv input/ar6_cmip5.csv plot/feedbacks_ar6_by_country.pdf
'''

import os
from importlib.machinery import SourceFileLoader
model_weights = SourceFileLoader('module.name',
	os.path.join(os.path.dirname(__file__), 'model_weights')).load_module()

import sys
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib as mpl
import scipy
import string

mpl.rc('font', family='Open Sans', size=8)
mpl.rc('axes', linewidth=0.3)
mpl.rc('axes', grid=True)
mpl.rc('lines', linewidth=1.2)
mpl.rc('xtick.major', width=0.3)
mpl.rc('ytick.major', width=0.3)
mpl.rc('legend', framealpha=1)
mpl.rc('legend', facecolor='#eeeeee')
mpl.rc('legend', edgecolor='none')
mpl.rc('legend', fancybox=False)
mpl.rc('legend', fontsize=8)
mpl.rc('grid', color='k')
mpl.rc('grid', alpha=0.2)
mpl.rc('grid', lw=0.1)

VARS = {
	'PL_hs': 'Planck',
	'Planck': 'Planck',
	'LR_hs': 'LR',
	'RH': 'RH',
	'Water vapour + lapse rate': 'RH+LR',
	'ALB': 'Albedo',
	'Surface albedo': 'Albedo',
	'CLD': 'Cloud',
	'Cloud': 'Cloud',
	'CLD_SW': 'Cloud$_{SW}$',
	'CLD_LW': 'Cloud$_{LW}$',
	'NET': 'Net',
	'Net feedback': 'Net',
	'ERR': 'Residual',
	'Residual': 'Residual',
}
VARS2 = {
	'ECS': 'ECS'
}
VARS3 = {
	'ERF_2x': 'ERF$_{2x}$',
	'TCR': 'TCR',
}

YLABEL = 'Feedback (Wm$^{-2}K^{-1}$)'
YLABEL2 = 'ECS (K)'
YLABEL3 = {
	'ERF_2x': 'ERF$_{2x}$ (Wm$^{-2}$)',
	'TCR': 'TCR (K)',
}

YLIM = [-2, 2]
YLIM2 = [1.5, 6]
YLIM3 = {
	'ERF_2x': [2.5, 4.5],
	'TCR': [0, 4],
}

def plot(group, d, models, vars_, \
	ylim=None, legend=True, ylabel=None, group_no=None, show_hline=False):

	groups = list(set(models[group]))
	n = len(groups)
	groups2 = []
	for g in groups:
		variants = []
		for i in range(len(models[group])):
			if models[group][i] == g:
				variants += models['variants'][i]
		mask = np.array([m in variants for m in d['Model']])
		m = np.sum(mask)
		if m > 0:
			groups2 += [g]
	groups = sorted(groups2)
	n = len(groups)

	xticks = []
	xticklabels = []
	cmap = plt.get_cmap('tab20')
	i = 0
	for var in vars_:
		if var not in d.keys():
			continue
		gmean = 0
		for j, g in enumerate(groups):
			variants = []
			for k in range(len(models[group])):
				if models[group][k] == g:
					variants += models['variants'][k]
			mask = np.array([m in variants for m in d['Model']])
			m = np.sum(mask)
			x = i*n*1.05 + j
			xticks += [x]
			xticklabels += [group_no[g]]
			label = '%s [%d]' % (g, group_no[g]) if i == 0 else None
			plt.scatter([x]*m, d[var][mask],
				s=16,
				lw=0.8,
				color='none',
				edgecolor=cmap(group_no[g] - 1),
				label=label)
			mean = np.mean(d[var][mask])
			gmean += mean
			plt.plot([x-0.5, x+0.5], [mean, mean],
				color='k', lw=0.8, zorder=-1)
		gmean /= n
		mean = np.mean(d[var])
		label = 'simple mean' if i == 0 else None
		plt.plot([i*n*1.05, i*n*1.05 + n - 1], [mean, mean],
			color='k', lw=0.8, zorder=-2, label=label)
		label = '%s mean' % group if i == 0 else None
		plt.plot([i*n*1.05, i*n*1.05 + n - 1], [gmean, gmean],
			color='k', lw=0.8, zorder=-2, linestyle='dashed', label=label)
		i += 1
	if type(ylim) == dict:
		ylim1 = plt.ylim(ylim[var])
	else:
		ylim1 = plt.ylim(ylim)
	plt.yticks(np.arange(ylim1[0], ylim1[1] + 0.5, 0.5))
	i = 0
	for var in vars_:
		if var not in d.keys():
			continue
		plt.text(i*n*1.05 + 0.5*(n - 1), ylim1[0] - 0.1*(ylim1[1] - ylim1[0]),
			vars_[var], va='top', ha='center')
		i += 1
	plt.gca().set_xticks(xticks)
	plt.gca().set_xticklabels(xticklabels, fontsize=5.5)
	plt.xlim(xticks[0] - 1, xticks[-1] + 1)
	if show_hline:
		plt.axhline(0, color='k', lw=0.5, zorder=-3, linestyle='dotted')
	if type(ylabel) == dict:
		plt.ylabel(ylabel[var])
	else:
		plt.ylabel(ylabel)
	if legend:
		plt.legend(loc='upper left', fontsize=5.5, handlelength=1,
			handletextpad=0.5)

if __name__ == '__main__':
	if len(sys.argv) != 7:
		sys.stderr.write(sys.modules[__name__].__doc__)
		sys.exit(1)
	group = sys.argv[1]
	sep = sys.argv[2]
	models_file = sys.argv[3]
	cmip5 = sys.argv[4]
	cmip6 = sys.argv[5]
	output = sys.argv[6]

	models = model_weights.read_models(models_file)

	d1 = pd.read_csv(cmip5)
	d2 = pd.read_csv(cmip6)

	d = pd.concat([d1, d2])

	groups = list(set(models[group]))
	n = len(groups)
	groups2 = []
	for g in groups:
		variants = []
		for i in range(len(models[group])):
			if models[group][i] == g:
				variants += models['variants'][i]
		mask1 = np.array([m in variants for m in d1['Model']])
		mask2 = np.array([m in variants for m in d2['Model']])
		if np.sum(mask1) > 0 or np.sum(mask2) > 0:
			groups2 += [g]
	groups = sorted(groups2)
	group_no = {f: i+1 for i, f in enumerate(groups)}

	def plot_letter(i):
		plt.text(0, 1.04, '(%s)' % string.ascii_lowercase[i],
			transform=plt.gca().transAxes, weight='bold')

	if sep == 'separate':
		fig = plt.figure(figsize=(11, 10))
		gs = mpl.gridspec.GridSpec(3, 4, hspace=0.3, wspace=0.3)
		fig.add_subplot(gs[0,0:4])
		plt.title('CMIP6')
		plot_letter(0)
		plot(group, d2, models, VARS, ylim=YLIM, ylabel=YLABEL, group_no=group_no,
			show_hline=True)
		fig.add_subplot(gs[2,0])
		plt.title('CMIP6')
		plot_letter(2)
		plot(group, d2, models, VARS2, legend=False, ylim=YLIM2, ylabel=YLABEL2,
			group_no=group_no)
		fig.add_subplot(gs[2,1])
		plt.title('CMIP6')
		plot_letter(3)
		plot(group, d2, models, VARS3, legend=False, ylim=YLIM3, ylabel=YLABEL3,
			group_no=group_no)
		fig.add_subplot(gs[1,0:4])
		plt.title('CMIP5')
		plot_letter(1)
		plot(group, d1, models, VARS, legend=True, ylim=YLIM, ylabel=YLABEL,
			group_no=group_no, show_hline=True)
		fig.add_subplot(gs[2,2])
		plt.title('CMIP5')
		plot_letter(4)
		plot(group, d1, models, VARS2, legend=False, ylim=YLIM2, ylabel=YLABEL2,
			group_no=group_no)
		fig.add_subplot(gs[2,3])
		plt.title('CMIP5')
		plot_letter(5)
		plot(group, d1, models, VARS3, legend=False, ylim=YLIM3, ylabel=YLABEL3,
			group_no=group_no)
	else:
		fig = plt.figure(figsize=(11, 6))
		gs = mpl.gridspec.GridSpec(2, 2, hspace=0.3, wspace=0.1)
		fig.add_subplot(gs[0,0:4])
		plt.title('CMIP5 + CMIP6')
		plot_letter(0)
		plot(group, d, models, VARS, ylim=YLIM, ylabel=YLABEL, group_no=group_no,
			show_hline=True)
		fig.add_subplot(gs[1,0])
		plot_letter(1)
		plot(group, d, models, VARS2, legend=False, ylim=YLIM2, ylabel=YLABEL2,
			group_no=group_no)
		fig.add_subplot(gs[1,1])
		plot_letter(2)
		plot(group, d, models, VARS3, legend=False, ylim=YLIM3, ylabel=YLABEL3,
			group_no=group_no)
	plt.savefig(output, bbox_inches='tight')
