#!/usr/bin/env python3
'''Plot global mean near-surface air temperature.

Usage: plot_tas <models> <tas> <hadcrut> <output>

Arguments:

- models: Table of models (CSV).
- tas: Input directory with model tas (NetCDF).
- hadcrut: Input HadCRUT file (NetCDF).
- output: Output plot (PDF).

Example:

bin/plot_tas input/models.csv input/tas input/HadCRUT.5.0.1.0.analysis.summary_series.global.monthly.nc plot/tas.pdf
'''

import os
from importlib.machinery import SourceFileLoader
model_weights = SourceFileLoader('module.name',
	os.path.join(os.path.dirname(__file__), 'model_weights')).load_module()

import sys
import ds_format as ds
import aquarius_time as aq
import matplotlib.pyplot as plt
import matplotlib as mpl
import numpy as np
import scipy.stats

mpl.rc('font', family='Open Sans')
mpl.rc('axes', linewidth=0.3)
mpl.rc('axes', grid=True)
mpl.rc('lines', linewidth=1.2)
mpl.rc('xtick.major', width=0.3)
mpl.rc('ytick.major', width=0.3)
mpl.rc('legend', framealpha=1)
mpl.rc('legend', facecolor='#eeeeee')
mpl.rc('legend', edgecolor='none')
mpl.rc('legend', fancybox=False)
mpl.rc('legend', fontsize=8)
mpl.rc('grid', color='k')
mpl.rc('grid', alpha=0.2)
mpl.rc('grid', lw=0.1)

def calc_ts(outtime, time, x):
	year = aq.to_date(time)[1]
	time1 = []
	ts1 = []
	for y in sorted(set(year)):
		time1 += [y]
		mask = year == y
		ts1 += [np.mean(x[mask])]
	time1 = np.array(time1)
	ts1 = np.array(ts1)
	n = len(ts1)
	ts2 = np.full(m, np.nan, np.float64)
	for i in range(m):
		w = scipy.stats.norm.pdf(time1, outtime[i], 15)
		w /= np.sum(w)
		ts2[i] = np.sum(ts1*w)
	ts2 -= np.mean(ts2[:50])
	return ts2

if __name__ == '__main__':
	if len(sys.argv) != 5:
		sys.stderr.write(sys.modules[__name__].__doc__)
		sys.exit(1)
	models_file = sys.argv[1]
	input_ = sys.argv[2]
	hadcrut = sys.argv[3]
	output = sys.argv[4]

	models_table = model_weights.read_models(models_file)

	dd = ds.readdir(input_, jd=True)
	d_hadcrut = ds.read(hadcrut, jd=True)

	model_family = {}
	n = len(models_table['model'])
	for i in range(n):
		for variant in models_table['variants'][i]:
			model_family[variant] = models_table['family'][i]

	families = []
	for d in dd:
		model = os.path.basename(d['filename'])[:-3]
		family = model_family.get(model)
		families += [family]

	families = sorted(set(families))
	family_no = {}
	for i, f in enumerate(families):
		family_no[f] = i

	time = np.arange(1850, 2015)
	m = len(time)
	ts = {}
	ts_all = []
	k = {}

	for d in dd:
		model = os.path.basename(d['filename'])[:-3]
		family = model_family.get(model)
		ts1 = calc_ts(time, d['time'], d['tas'][:,0,0])
		ts[family] = ts.get(family, []) + [ts1]
		ts_all += [ts1]

	ts_hadcrut = calc_ts(time, d_hadcrut['time'], d_hadcrut['tas_mean'])

	ts_avg = [np.mean(ts[f], axis=0) for f in families]
	ts_avg2 = np.mean(ts_avg, axis=0)
	ts_model_avg = np.mean(ts_all, axis=0)

	cmap = plt.get_cmap('tab20')
	for i, family in enumerate(families):
		#for i in range(m):
		#	ts[family][i] -= ts_avg[i]
		avg = np.mean(ts[family], axis=0) #- ts_avg2
		low = np.percentile(ts[family], 16, axis=0) #- ts_avg2
		high = np.percentile(ts[family], 100-16, axis=0) #- ts_avg2
		color = cmap(family_no[family])
		label = '%s (%d)' % (family, len(ts[family]))
		plt.plot(time, avg, color=color, lw=1, label=label)
		plt.fill_between(time, low, high, color=color, edgecolor='none',
			alpha=0.2)
		plt.errorbar(time[-1] + i + 1, avg[-1],
			avg[-1] - low[-1],
			high[-1] - avg[-1],
			color=color,
			clip_on=False,
		)
	plt.plot(time, ts_model_avg, color='k', lw=1, label='model mean')
	plt.plot(time, ts_avg2, color='k', lw=1, label='family mean',
		linestyle='dashed')
	plt.plot(time, ts_hadcrut, color='k', lw=1, label='HadCRUT5',
		linestyle='dotted')
	plt.title('CMIP6')
	plt.xlabel('Year')
	plt.ylabel('Global mean near-surface air temperature anomaly (K)')
	plt.xlim(time[0], time[-1] + len(families) + 1)
	plt.legend(fontsize=7)
	plt.savefig(output, bbox_inches='tight')
