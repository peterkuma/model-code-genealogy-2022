#!/usr/bin/env python3
'''Plot global mean near-surface air temperature.

Usage: plot_tas <models> <control> <tas> <hadcrut> <output> <y1> <y2> <title> divider: <divider>

Arguments:

- models: Table of models (CSV).
- control: Input directory with model tas - piControl or none (NetCDF).
- tas: Input directory with model tas - experiment (NetCDF).
- hadcrut: Input HadCRUT file (NetCDF).
- output: Output plot (PDF).
- y1: Start year.
- y2: End year.
- title: Plot title.

Options:

- divider: Year to plot vertical divider on.

Example:

bin/plot_tas input/models.csv none input/cmip6/historical/tas input/HadCRUT.5.0.1.0.analysis.summary_series.global.monthly.nc plot/tas_cmip6_historical.pdf 1850 2014 'CMIP6 historical'
bin/plot_tas input/models.csv none input/cmip6/historical+ssp245/tas input/HadCRUT.5.0.1.0.analysis.summary_series.global.monthly.nc plot/tas_cmip6_historical+ssp245.pdf 1850 2099 'CMIP6 historical + SSP2-4.5' divider: 2015
bin/plot_tas input/models.csv input/cmip6/{piControl,abrupt-4xCO2}/tas none plot/tas_cmip6_abrupt-4xCO2.pdf 1 150 'CMIP6 abrupt-4xCO2'
bin/plot_tas input/models.csv input/cmip6/{piControl,1pctCO2}/tas none plot/tas_cmip6_1pctCO2.pdf 1 150 'CMIP6 1pctCO2'
bin/plot_tas input/models.csv none input/cmip5/historical/tas input/HadCRUT.5.0.1.0.analysis.summary_series.global.monthly.nc plot/tas_cmip5_historical.pdf 1850 2005 'CMIP5 historical'
bin/plot_tas input/models.csv none input/cmip5/historical+rcp45/tas input/HadCRUT.5.0.1.0.analysis.summary_series.global.monthly.nc plot/tas_cmip5_historical+rcp45.pdf 1850 2099 'CMIP5 historical + RCP4.5' divider: 2006
bin/plot_tas input/models.csv input/cmip5/{piControl,abrupt-4xCO2}/tas none plot/tas_cmip5_abrupt-4xCO2.pdf 1 140 'CMIP5 abrupt-4xCO2'
bin/plot_tas input/models.csv input/cmip5/{piControl,1pctCO2}/tas none plot/tas_cmip5_1pctCO2.pdf 1 140 'CMIP5 1pctCO2'
'''

TYPES = ['variant', 'family', 'code']
LINESTYLES = ['dashed', 'dotted', 'dashdot']
MARKERS = ['o', 's', 'p', 'D', 'P', 'X', '^', '>', 'v', '<', '*', 'H']

FAMILY_ORDER = [
	'CCM',
	'CanAM',
	'CSIRO',
	'GFDL',
	'GFS',
	'HadAM',
	'ECMWF',
	'INM',
	'IPSL',
	'MIROC',
	'UA MCM',
	'UCLA GCM',
]

import os
import logging
from importlib.machinery import SourceFileLoader
model_weights = SourceFileLoader('module.name',
	os.path.join(os.path.dirname(__file__), 'model_weights')).load_module()

import sys
import ds_format as ds
import aquarius_time as aq
import pst
import matplotlib.pyplot as plt
import matplotlib as mpl
import numpy as np
import scipy.stats
import matplotlib.lines as mlines

mpl.rc('font', family='Open Sans')
mpl.rc('axes', linewidth=0.3)
mpl.rc('axes', grid=True)
mpl.rc('lines', linewidth=1.2)
mpl.rc('xtick.major', width=0.3)
mpl.rc('ytick.major', width=0.3)
mpl.rc('legend', framealpha=1)
mpl.rc('legend', facecolor='#eeeeee')
mpl.rc('legend', edgecolor='none')
mpl.rc('legend', fancybox=False)
mpl.rc('legend', fontsize=8)
mpl.rc('grid', color='k')
mpl.rc('grid', alpha=0.2)
mpl.rc('grid', lw=0.1)

def get_weights(type_, models, subset):
	weights = {}
	subset2 = []
	for s in subset:
		subset2 += [s]
	subset = subset2
	d = model_weights.model_weights(type_, models, subset)
	for i, model in enumerate(d['model']):
		if np.isfinite(d['weight'][i]):
			weights[model] = d['weight'][i]
	return weights

def calc_ts(outtime, time, x, normalize=None, sd=10, model=None):
	m = len(outtime)
	year = aq.to_date(time)[1]
	years = set(year)
	ymin = year[0]
	ymax = year[-1]
	time1 = []
	ts1 = []
	for y in sorted(years):
		time1 += [y]
		mask = year == y
		ts1 += [np.mean(x[mask])]
	time1 = np.array(time1)
	ts1 = np.array(ts1)
	n = len(ts1)
	ts2 = np.full(m, np.nan, np.float64)
	for i, y in enumerate(outtime):
		w = scipy.stats.norm.pdf(time1, outtime[i], sd)
		w /= np.sum(w)
		ts2[i] = np.sum(ts1*w) if (y >= (ymin + 2*sd) and y <= (ymax - 2*sd)) \
			else np.nan
	if normalize is not None:
		ts2 -= np.nanmean(ts2[2*sd:(normalize+2*sd)])
	return ts2

if __name__ == '__main__':
	args, opts = pst.decode_argv(sys.argv, as_unicode=True)
	if len(args) != 9:
		sys.stderr.write(sys.modules[__name__].__doc__)
		sys.exit(1)
	models_file = args[1]
	control = args[2]
	input_ = args[3]
	hadcrut = args[4]
	output = args[5]
	y1 = args[6]
	y2 = args[7]
	title = args[8]
	divider = opts.get('divider')

	print('<- %s' % models_file)
	models_table = model_weights.read_models(models_file)
	if control is not None:
		print('<- %s' % control)
		ddc = ds.readdir(control, jd=True)
	else:
		ddc = None
	print('<- %s' % input_)
	dd = ds.readdir(input_, jd=True)
	if hadcrut is not None:
		print('<- %s' % hadcrut)
		d_hadcrut = ds.read(hadcrut, jd=True)
	else:
		d_hadcrut = None

	sd = 7

	model_family = {}
	n = len(models_table['model'])
	for i in range(n):
		for variant in models_table['variants'][i]:
			model_family[variant] = models_table['family'][i]

	for d in dd + (ddc if ddc is not None else []):
		d['model'] = os.path.basename(d['filename'])[:-3]
		d['tas'] = d['tas'][:,0,0]
		# Fix bugs in models.
		if d['model'] == 'GISS-E2-2-H':
			mask = aq.to_iso(d['time']) == '1850-01-01T00:00:00'
			d['time'] = d['time'][~mask]
			d['tas'] = d['tas'][~mask]
		mask = (d['tas'] < 200) | (d['tas'] > 1000)
		d['time'] = d['time'][~mask]
		d['tas'] = d['tas'][~mask]

	for d in dd:
		d['family'] = model_family[d['model']]

	dd_new = []
	for d in dd:
		dc = None
		if ddc is not None:
			for dx in ddc:
				if dx['model'] == d['model']:
					dc = dx
					break
			if dc is None:
				logging.warning('no control run available for model "%s"' % \
					d['model'])
				continue
		if dc is not None:
			d['tas'] -= np.mean(dc['tas'])
		if y1 == 1:
			d['time'] = d['time'] - d['time'][0] + aq.from_iso('0001-01-01')
		dd_new += [d]
	dd = dd_new

	family_set = sorted(set([model_family[d['model']] for d in dd]))

	time = np.arange(y1, y2 + 1)
	m = len(time)
	models = [d['model'] for d in dd]
	normalize = 30 if ddc is None else None
	tas = np.stack([ \
		calc_ts(time, d['time'], d['tas'], normalize, sd, model=d['model']) \
		for d in dd \
	])

	for i, tas1 in enumerate(tas):
		if np.any(np.isnan(tas1[2*sd:-2*sd])):
			tas1[::] = np.nan

	tas_by_family = {}
	for i, d in enumerate(dd):
		tas_by_family[d['family']] = tas_by_family.get(d['family'], []) + \
			[tas[i]]
	tas_by_family = {k: np.stack(v) for k, v in tas_by_family.items()}

	if d_hadcrut is not None:
		tas_hadcrut = calc_ts(time, d_hadcrut['time'], d_hadcrut['tas_mean'],
			50, sd)

	plt.figure(figsize=(6, 4))
	handles = []

	if d_hadcrut is not None:
		label = 'HadCRUT5'
		plt.plot(time[2*sd:-2*sd], tas_hadcrut[2*sd:-2*sd], color='k', lw=1.2,
			label=label, zorder=1000)
		handles += [mlines.Line2D([], [], color='k', label=label)]

	for i, type_ in enumerate(TYPES):
		weights = get_weights(type_, models_table, models)
		w = [weights[x] for x in models]
		tas_avg = np.full(m, np.nan, np.float64)
		for j in range(m):
			wsum = np.sum(w*np.isfinite(tas[:,j]))
			tas_avg[j] = np.nansum(tas[:,j]*w)/wsum
		type2 = 'multi-model' if type_ == 'variant' else type_
		if divider is not None:
			plt.axvline(divider, color='k', lw=0.5)
		label = '%s mean' % type2
		linestyle = LINESTYLES[i]
		plt.plot(time[2*sd:-2*sd], tas_avg[2*sd:-2*sd], color='k', lw=1,
			label=label, linestyle=linestyle, zorder=100*(len(TYPES) - i))
		handles += [mlines.Line2D([], [],
			color='k', linestyle=linestyle, label=label)]

	cmap = plt.get_cmap('tab20')
	for i, family in enumerate(family_set):
		tas_set = tas_by_family[family][:,sd*2:-sd*2]
		timex = time[sd*2:-sd*2]
		u = np.sum(np.isfinite(tas_set[:,-1]))
		if u == 0:
			continue
		mean = np.nanmean(tas_set, axis=0)
		low = np.nanpercentile(tas_set, 16, axis=0)
		high = np.nanpercentile(tas_set, 100-16, axis=0)
		color = cmap(FAMILY_ORDER.index(family))
		label = '%s (%d)' % (family, u)
		marker = MARKERS[FAMILY_ORDER.index(family)]
		plt.plot(timex, mean, color=color, lw=1, label=label,
			zorder=10*(len(family_set) - i))
		handles += [mlines.Line2D([], [],
			color=color, marker=marker, markersize=4,
			label=label)]
		plt.scatter(timex[::20], mean[::20], marker=marker, s=18,
			color=color, zorder=10*(len(family_set) - i))
		plt.fill_between(timex, low, high, color=color, edgecolor='none',
			alpha=0.2, zorder=10*(len(family_set) - i))
		if u > 1:
			plt.plot(
				[timex[-1] + (i + 1)*1.5, timex[-1] + (i + 1)*1.5],
				[low[-1], high[-1]],
				color=color
			)
		plt.scatter(timex[-1] + (i + 1)*1.5, mean[-1], color=color, s=18,
			marker=marker)

	plt.title(title)
	plt.xlabel('Year')
	plt.ylabel('Global mean near-surface air temperature anomaly (K)')
	plt.xlim(time[2*sd] - 1.5, time[-2*sd] + (len(family_set) + 1)*1.5)

	legend = plt.legend(handles=handles, fontsize=6, loc='upper left',
		bbox_to_anchor=(1, 1))
	legend.set_zorder(1000)

	print('-> %s' % output)
	plt.savefig(output, bbox_inches='tight')
