#!/usr/bin/env python3
'''Plot global mean near-surface air temperature.

Usage: plot_tas <models> <tas> <hadcrut> <output>

Arguments:

- models: Table of models (CSV).
- tas: Input directory with model tas (NetCDF).
- hadcrut: Input HadCRUT file (NetCDF).
- output: Output plot (PDF).

Example:

bin/plot_tas input/models.csv input/tas input/HadCRUT.5.0.1.0.analysis.summary_series.global.monthly.nc plot/tas.pdf
'''

TYPES = ['variant', 'family']
LINESTYLES = ['dashed', 'dotted']

import os
from importlib.machinery import SourceFileLoader
model_weights = SourceFileLoader('module.name',
	os.path.join(os.path.dirname(__file__), 'model_weights')).load_module()

import sys
import ds_format as ds
import aquarius_time as aq
import matplotlib.pyplot as plt
import matplotlib as mpl
import numpy as np
import scipy.stats

mpl.rc('font', family='Open Sans')
mpl.rc('axes', linewidth=0.3)
mpl.rc('axes', grid=True)
mpl.rc('lines', linewidth=1.2)
mpl.rc('xtick.major', width=0.3)
mpl.rc('ytick.major', width=0.3)
mpl.rc('legend', framealpha=1)
mpl.rc('legend', facecolor='#eeeeee')
mpl.rc('legend', edgecolor='none')
mpl.rc('legend', fancybox=False)
mpl.rc('legend', fontsize=8)
mpl.rc('grid', color='k')
mpl.rc('grid', alpha=0.2)
mpl.rc('grid', lw=0.1)

def get_weights(type_, models, subset):
	weights = {}
	d = model_weights.model_weights(type_, models, subset)
	for i, model in enumerate(d['model']):
		if np.isfinite(d['weight'][i]):
			weights[model] = d['weight'][i]
	return weights

def calc_ts(outtime, time, x):
	year = aq.to_date(time)[1]
	time1 = []
	ts1 = []
	for y in sorted(set(year)):
		time1 += [y]
		mask = year == y
		ts1 += [np.mean(x[mask])]
	time1 = np.array(time1)
	ts1 = np.array(ts1)
	n = len(ts1)
	ts2 = np.full(m, np.nan, np.float64)
	for i in range(m):
		w = scipy.stats.norm.pdf(time1, outtime[i], 15)
		w /= np.sum(w)
		ts2[i] = np.sum(ts1*w)
	ts2 -= np.mean(ts2[:50])
	return ts2

if __name__ == '__main__':
	if len(sys.argv) != 5:
		sys.stderr.write(sys.modules[__name__].__doc__)
		sys.exit(1)
	models_file = sys.argv[1]
	input_ = sys.argv[2]
	hadcrut = sys.argv[3]
	output = sys.argv[4]

	print('<- %s' % models_file)
	models_table = model_weights.read_models(models_file)
	print('<- %s' % input_)
	dd = ds.readdir(input_, jd=True)
	print('<- %s' % hadcrut)
	d_hadcrut = ds.read(hadcrut, jd=True)

	model_family = {}
	n = len(models_table['model'])
	for i in range(n):
		for variant in models_table['variants'][i]:
			model_family[variant] = models_table['family'][i]

	for d in dd:
		d['model'] = os.path.basename(d['filename'])[:-3]
		d['family'] = model_family.get(d['model'])

	family_set = sorted(set([model_family.get(d['model']) for d in dd]))
	family_no = {f: i for i, f in enumerate(family_set)}

	time = np.arange(1850, 2015)
	m = len(time)
	models = [d['model'] for d in dd]
	tas = [calc_ts(time, d['time'], d['tas'][:,0,0]) for d in dd]

	tas_by_family = {}
	for i, d in enumerate(dd):
		tas_by_family[d['family']] = tas_by_family.get(d['family'], []) + \
			[tas[i]]

	tas_hadcrut = calc_ts(time, d_hadcrut['time'], d_hadcrut['tas_mean'])

	plt.figure(figsize=(6, 4))

	cmap = plt.get_cmap('tab20')
	for i, family in enumerate(family_set):
		tas_set = tas_by_family[family]
		mean = np.mean(tas_set, axis=0)
		low = np.percentile(tas_set, 16, axis=0)
		high = np.percentile(tas_set, 100-16, axis=0)
		color = cmap(family_no[family])
		label = '%s (%d)' % (family, len(tas_set))
		plt.plot(time, mean, color=color, lw=1, label=label)
		plt.fill_between(time, low, high, color=color, edgecolor='none',
			alpha=0.2)
		plt.errorbar(time[-1] + i + 1, mean[-1],
			mean[-1] - low[-1], high[-1] - mean[-1],
			color=color, clip_on=False,
		)

	for i, type_ in enumerate(TYPES):
		weights = get_weights(type_, models_table, models)
		tas_avg = np.average(tas, weights=[weights[m] for m in models], axis=0)
		type2 = 'multi-model' if type_ == 'variant' else type_
		plt.plot(time, tas_avg, color='k', lw=1, label='%s mean' % type2,
			linestyle=LINESTYLES[i])

	plt.plot(time, tas_hadcrut, color='k', lw=1, label='HadCRUT5')

	plt.title('CMIP6')
	plt.xlabel('Year')
	plt.ylabel('Global mean near-surface air temperature anomaly (K)')
	plt.xlim(time[0], time[-1] + len(family_set) + 1)
	plt.legend(fontsize=7)

	print('-> %s' % output)
	plt.savefig(output, bbox_inches='tight')
