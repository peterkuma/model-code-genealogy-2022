#!/usr/bin/env python3
'''Plot variable-weight diagram.

Usage: plot_var_weight VAR MODELS INPUT OUTPUT TITLE

Arguments:

  VAR     Variable to plot on the x-axis.
  MODELS  Table of all models (CSV).
  CMIP    Input data (CSV). The table should contain a column "Model" identifying the model, and columns for variables.
  OUTPUT  Output plot (PDF).
  TITLE   Plot title.

Examples:

bin/plot_var_weight ECS input/models.csv input/CMIP5_ECS_ERF_fbks.csv plot/ecs_weight_cmip5.pdf CMIP5
bin/plot_var_weight ECS input/models.csv input/CMIP6_ECS_ERF_fbks.csv plot/ecs_weight_cmip6.pdf CMIP6
'''

import os
from importlib.machinery import SourceFileLoader
model_weights = SourceFileLoader('module.name',
	os.path.join(os.path.dirname(__file__), 'model_weights')).load_module()

import sys
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib as mpl
import ds_format as ds

mpl.rc('font', family='Open Sans')
mpl.rc('axes', linewidth=0.3)
mpl.rc('axes', grid=True)
mpl.rc('lines', linewidth=1.2)
mpl.rc('xtick.major', width=0.3)
mpl.rc('ytick.major', width=0.3)
mpl.rc('legend', framealpha=1)
mpl.rc('legend', facecolor='#eeeeee')
mpl.rc('legend', edgecolor='none')
mpl.rc('legend', fancybox=False)
mpl.rc('legend', fontsize=8)
mpl.rc('grid', color='k')
mpl.rc('grid', alpha=0.2)
mpl.rc('grid', lw=0.1)

SYMBOLS = ['o', 's', 'v', '^', '<', '>', '*', 'h', 'D', 'X', 'P', 'p', 'x']

FAMILY_ORDER = [
	'CCM',
	'CanAM',
	'CSIRO',
	'GFDL',
	'GFS',
	'HadAM',
	'ECMWF',
	'INM',
	'IPSL',
	'MIROC',
	'UA MCM',
	'UCLA GCM',
]

VARS = {
	'PL': 'Planck',
	'WV': 'WV',
	'LR': 'LR',
	'WV+LR': 'WV+LR',
	'ALB': 'Albedo',
	'CLD': 'Cloud',
	'CLD_SW': 'Cloud$_\mathrm{SW}$',
	'CLD_LW': 'Cloud$_\mathrm{LW}$',
	'NET': 'Net',
	'ERR': 'Residual',
	'ECS': 'ECS',
	'ERF_2x': 'ERF$_{\\mathrm{2x}}$',
	'TCR': 'TCR',
}

def get_weights(type_, models, subset):
	weights = {}
	d = model_weights.model_weights(type_, models, subset)
	for i, model in enumerate(d['model']):
		if np.isfinite(d['weight'][i]):
			weights[model] = d['weight'][i]
	return weights

if __name__ == '__main__':
	if len(sys.argv) != 6:
		sys.stderr.write(sys.modules[__name__].__doc__)
		sys.exit(1)
	var = sys.argv[1]
	models_file = sys.argv[2]
	cmip = sys.argv[3]
	output = sys.argv[4]
	title = sys.argv[5]

	models_table = model_weights.read_models(models_file)
	d = pd.read_csv(cmip)

	models = []
	values = []
	for i, model in enumerate(d['Model']):
		if np.isfinite(d[var][i]):
			models += [model]
			values += [d[var][i]]

	weights = get_weights('code', models_table, models)
	w = np.array([weights.get(model, np.nan) for model in models])
	w /= np.nanmax(w)

	cmap = plt.get_cmap('tab20')
	n = len(models)
	x = {}
	y = {}
	for i, model in enumerate(models):
		family = None
		for j, variants in enumerate(models_table['variants']):
			if model in variants:
				family = models_table['family'][j]
				break
		if family not in x: x[family] = []
		if family not in y: y[family] = []
		x[family] += [values[i]]
		y[family] += [w[i]]

	for family in sorted(x.keys()):
		k = FAMILY_ORDER.index(family)
		handle = plt.scatter(x[family], y[family],
			s=40,
			color='none',
			marker=SYMBOLS[k],
			edgecolor=cmap(k),
			label=family,
		)
	xmin = 0
	xmax = 10
	xstep = 0.5
	#xmin = -10
	#xmax = 10
	#xstep = 0.5
	xx = np.arange(xmin, xmax, xstep)
	x = []
	y = []
	y2 = []
	for i in range(len(xx) - 1):
		x1 = xx[i]
		x2 = xx[i + 1]
		mask = (values >= x1) & (values < x2)
		if np.sum(mask) == 0: continue
		wm = np.nanmean(w[mask])
		count = np.sum(np.isfinite(w[mask]))
		x += [(x1 + x2)/2]
		y += [wm]
		y2 += [wm*count]
	x = np.array(x)
	y = np.array(y)
	y2 = np.array(y2)
	y2 /= np.sum(y2)
	#y /= np.max(y)
	plt.bar(x, y,
		width=xstep,
		color='#eeeeee',
		zorder=-1,
		edgecolor='#555555',
		lw=0.5,
	)
	for x0, y0 in zip(x, y2):
		plt.plot([x0-xstep/2, x0+xstep/2], [y0, y0],
			color='k',
			lw=0.5,
			linestyle='dashed',
		)

	plt.legend(fontsize=8, handlelength=0.7)
	if var in ['ECS', 'TCR']:
		units = 'K'
	elif var in ['ERF_2x']:
		units = 'Wm$^{-2}$'
	else:
		units = 'Wm$^{-2}$K$^{-1}$'
	plt.xlabel('%s (%s)' % (VARS[var], units))
	plt.ylabel('Normalized weight')
	plt.xlim(1.5, 6)
	plt.title(title)
	plt.savefig(output, bbox_inches='tight')
